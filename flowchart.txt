1. Import necessary modules (pygame, sys, and numpy)

2. Define color constants (BLACK, WHITE, BLUE, GREEN, PURPLE, GREY, HORRIBLE_YELLOW, and BACKGROUND)

3. Define the Dot class, which is a subclass of pygame.sprite.Sprite:
    a. Initialize object with properties (x and y coordinates, width and height of screen, color, radius, velocity, and randomize flag)
    b. Initialize the parent class
    c. Create the image of the dot using a Surface object and drawing a circle on it
    d. Create a rect object using the image's dimensions
    e. Create pos and vel numpy arrays using the provided x and y coordinates and velocity
    f. Initialize killswitch_on, recovered, and randomize flags
    g. Store width and height of screen in class properties

4. Define the update() method of the Dot class, which is called every frame of the simulation:
    a. Increment the dot's position by its velocity
    b. Check if the dot has crossed the screen boundaries and, if so, apply periodic boundary conditions
    c. Update the rect object with the new x and y coordinates
    d. Normalize the velocity if it is greater than 3
    e. Add random velocity if randomize flag is set
    f. If killswitch_on flag is set, decrement cycles_to_fate and check if it has reached 0
        i. If cycles_to_fate has reached 0, set killswitch_on flag to False and check if the dot dies or recovers based on mortality_rate

5. Define the respawn() method of the Dot class, which is called when a dot dies:
    a. Return a new Dot object with the same position, velocity, and screen dimensions as the original dot, but with the specified color

6. Define the killswitch() method of the Dot class, which sets the killswitch_on flag to True and stores the number of cycles until the dot dies and the mortality rate:
    a. Set killswitch_on flag to True
    b. Store cycles_to_fate and mortality_rate

7. Define the Simulation class:
    a. Initialize object with screen dimensions and default values for number of susceptible, infected, and quarantined dots, simulation duration, and mortality rate
    b. Initialize pygame, create screen object, and set window caption
    c. Initialize sprite groups for susceptible, infected, and recovered dots, as well as an all_container group that contains all dots
    d. Initialize a clock object to control the frame rate
    e. Initialize font object and a text surface to display simulation information

8. Define the start() method of the Simulation class, which sets up the simulation and runs the main loop:
    a. Calculate the total number of dots in the simulation
    b. Create initial dot objects and add them to the appropriate sprite group
    c. Run the main loop, which does the following every frame:
        i. Process user input and exit the loop if the user closes the window or presses the escape key
        ii. Update all dots
        iii. Check for collisions between dots and apply the appropriate actions (susceptible dots can be infected, infected dots can recover or die, and recovered dots are removed from the simulation)
        iv. Draw